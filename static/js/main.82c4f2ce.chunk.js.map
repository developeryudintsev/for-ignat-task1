{"version":3,"sources":["common/Input.module.css","task2/TodoList.module.css","task1/TelegramStyles.module.css","common/Menu.module.css","common/Button.module.css","common/Preloader/Preloader.module.css","assets/images/preloader.svg","common/Range/Range.module.css","common/RangeDouble/RangeDouble.module.css","common/Button.tsx","common/Input.tsx","common/Storage.tsx","task1/Telegram.tsx","common/Menu.tsx","common/InputTodolist.tsx","common/CheckBox.tsx","common/EditableSpan.tsx","task2/TodoList.tsx","common/Select.tsx","common/Radio.tsx","common/tests/homeWorkReducer.tsx","task2/ArrayState.tsx","task2/Timer.tsx","common/Preloader/Preloader.tsx","common/Preloader/PreloaderReducer.tsx","common/Range/Range.tsx","common/RangeDouble/RangeDouble.tsx","App.tsx","reducers/ThemeReducer.tsx","serviceWorker.ts","store/store.tsx","index.tsx"],"names":["module","exports","Button","props","className","Filter","title","styles","colorFilter","universalButton","onClick","callback","Input","useState","error","setError","onAddTaskClick","sendName","trim","clickEnter","universal","type","value","onChange","event","setSendName","currentTarget","onKeyPress","charCode","Arr","counter","Telegram","id","name","names","setNames","style","wrapper","telega","surName","tt","arQualities","map","m","key","prioritet","class1","class2","toDo","Delete","changeFilter","length","alert","recordName","push","localStorage","setItem","toString","saveState","i","console","log","getItem","restoreState","NamesFoo","Menu","on","setOn","onOff","OnValue","exact","to","callBack","opacity","MondayACtive","Monday","TuesdayActive","Tuesday","InputTodolist","setTitle","callBackHandler","normal","errorMessage","CheckBox","checked","isDone","EditableSpan","autoFocus","onBlur","onDoubleClick","TodoList","RemoveTodolist","saveNewTitleTodolist","addTask","Tasks","removeTask","changeStatus","saveNewTitle","changeFilterTodolist","filter","Select","Skill","SetSkill","arraySkills","skills","Radio","onChangeHandler","arraySkillsFoo","Number","setColor","color","hwReducer","state","action","sort","a","b","f","age","payload","Error","ArrayState","setState","SortUpValueForAction","sortFoo","SortDownValueForAction","RsortFoo","SortAGEAC","AgeSortFoo","Timer","opasityus","setOpasityus","Date","timerID","setTimerID","intervalValue","setIntervalValue","setIntervalFoo","clearInterval","setInterval","dateStyle","margin","width","height","backgroundColor","border","getDate","getUTCMonth","getFullYear","timer","onMouseEnter","onMouseLeave","toLocaleTimeString","buttons","Preloader","flexContainer","isFetching","src","preloader","PreloaderReducer","loading","LoadingAC","Range","React","memo","min","setValue","case","max","useStyles","makeStyles","root","valuetext","RangeDouble","classes","Typography","gutterBottom","Slider","newValue","valueLabelDisplay","aria-labelledby","getAriaValueText","Todolist1","v1","Todolist2","App","show","setShow","useReducer","setDispatchLoading","setarQualities","newArQualities","filtered","setFiltered","filteredarQualities","setOpacity","todolists","setTodolists","setTasks","addTodolist","newTodolistId","todolistsID","todolist","newTasks","removeId","filterValue","todolistsId","find","CheckBoxId","changeStatusValue","TasksID","task","useSelector","dispatch","useDispatch","mId","startState","path","render","setTimeout","tasksLayer","Boolean","window","location","hostname","match","rootReducer","combineReducers","store","createStore","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.82c4f2ce.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"universal\":\"Input_universal__1ebzZ\",\"error\":\"Input_error__1Jpk0\",\"normal\":\"Input_normal__15tvf\",\"error-message\":\"Input_error-message__1kVfD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TodoList\":\"TodoList_TodoList__2Izhb\",\"border\":\"TodoList_border__2Pc5i\",\"timer\":\"TodoList_timer__1a-MD\",\"buttons\":\"TodoList_buttons__bz2ZJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"telega\":\"TelegramStyles_telega__ZoKJK\",\"class1\":\"TelegramStyles_class1__1knsX\",\"class2\":\"TelegramStyles_class2__3XOFT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Menu\":\"Menu_Menu__2YIBy\",\"Monday\":\"Menu_Monday__2oDlu\",\"Tuesday\":\"Menu_Tuesday__u7Kuz\",\"MondayACtive\":\"Menu_MondayACtive__1BN8z\",\"TuesdayActive\":\"Menu_TuesdayActive__1rIYg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"universalButton\":\"Button_universalButton__2PvYt\",\"orangeButton\":\"Button_orangeButton__3Vxh5\",\"colorFilter\":\"Button_colorFilter__3Ke4j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"flexContainer\":\"Preloader_flexContainer__dd1lC\",\"isFetching\":\"Preloader_isFetching__F9qnx\"};","module.exports = __webpack_public_path__ + \"static/media/preloader.c4d45bce.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"case\":\"Range_case__3UcBM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"case\":\"RangeDouble_case__qWkRs\"};","import React from \"react\";\r\nimport styles from './Button.module.css'\r\n\r\ntype ButtonPropsType = {\r\n    title: string\r\n    callback?: () => void\r\n    Filter?:string\r\n}\r\n\r\nexport const Button = (props:ButtonPropsType) => {\r\n    return (\r\n        <button className={props.Filter==props.title? styles.colorFilter:styles.universalButton}\r\n                onClick={props.callback}>{props.title}</button>\r\n    )\r\n}\r\n","import React, {useState, ChangeEvent, KeyboardEvent} from \"react\";\r\nimport styles from './Input.module.css'\r\nimport {Button} from \"../common/Button\";\r\n\r\ntype InputPropsType = {\r\n    sendName: string\r\n    setSendName: (value: string) => void\r\n    clickEnter: (value: string) => void\r\n}\r\n\r\nexport const Input = (props: InputPropsType) => {\r\n    let [error, setError] = useState<string | null>(null);\r\n    const onChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setError('');\r\n                props.setSendName(event.currentTarget.value)\r\n    };\r\n\r\n    const onKeyPress = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.charCode === 13) {\r\n            props.clickEnter(props.sendName);\r\n            onAddTaskClick();\r\n        }\r\n    };\r\n\r\n    function onAddTaskClick() {\r\n        if (props.sendName.trim() !== '') {\r\n            props.clickEnter(props.sendName);\r\n            setError('')\r\n        } else {\r\n            setError(' Title is required')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <input className={props.sendName ? styles.universal : styles.error} type=\"text\" value={props.sendName}\r\n                   onChange={onChange}\r\n                   onKeyPress={onKeyPress}\r\n            />\r\n\r\n            <Button title={'SEND'} callback={() => {\r\n                onAddTaskClick()\r\n            }}/>\r\n            {<div className=\"error-message\">{error}</div>}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\ntype recordNameType = {\r\n    id: number\r\n    name: string\r\n}\r\nlet Arr=[];\r\nlet counter = 0;\r\nexport const saveState = (recordName: recordNameType) => {\r\n    counter++;\r\n    Arr.push(counter)\r\n    localStorage.setItem(counter.toString(), recordName.name)\r\n}\r\n\r\nexport const restoreState=()=>{\r\n for(let i=1;i<=Arr.length;i++){\r\n     console.log(localStorage.getItem(i.toString()))\r\n }\r\n\r\n\r\n}\r\n\r\n","import React, {useState} from 'react';\r\nimport style from './TelegramStyles.module.css';\r\nimport {v1} from \"uuid\";\r\nimport {Button} from \"../common/Button\";\r\nimport {Input} from \"../common/Input\";\r\nimport {restoreState, saveState} from \"../common/Storage\";\r\n\r\ntype ITelegram = {\r\n    name: string,\r\n    surName: string,\r\n    arQualities: Array<InArray>\r\n    Delete: (id: string) => void;\r\n    changeFilter: (value: string) => void;\r\n}\r\ntype InArray = {\r\n    id: string,\r\n    toDo: string,\r\n    prioritet: string,\r\n}\r\n\r\nexport function Telegram(props: ITelegram) {\r\n    let [sendName, setSendName] = useState('');\r\n    let [names, setNames] = useState([\r\n        {id: 0, name: 'Sasha Yudintsev'}\r\n    ])\r\n    let counter = 0;\r\n\r\n    // let sum = 1;\r\n\r\n    function clickEnter(sendName: string) {\r\n        if (sendName.length >= 3) {\r\n            alert('Hi USER ' + sendName);\r\n            NamesFoo(sendName);\r\n        }\r\n        setSendName('')\r\n    }\r\n\r\n    function NamesFoo(sendName: string) {\r\n        // counter++\r\n        let recordName = {id: counter, name: sendName};\r\n        saveState(recordName);\r\n        restoreState();\r\n        setNames([recordName, ...names]);\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={style.wrapper}>\r\n                <div className={style.telega}>\r\n                    <p></p>\r\n                    <div>{props.name}</div>\r\n                    <div>{props.surName}</div>\r\n                    <hr/>\r\n\r\n                    <table className={style.tt}>\r\n                        <th>TODO</th>\r\n                        <th>PRIORITET</th>\r\n                    </table>\r\n                    <table>\r\n                        {props.arQualities.map(m =>\r\n                            <div key={m.id}\r\n                                 className={m.prioritet === 'hight' ? style.class1 : style.class2}>\r\n                                <tr>\r\n                                    <td>{m.toDo}</td>\r\n                                    <td>{m.prioritet}</td>\r\n                                    <Button title={\"delete\"} callback={() => {\r\n                                        props.Delete(m.id)\r\n                                    }}/>\r\n                                </tr>\r\n                            </div>)}\r\n                    </table>\r\n                    <p></p>\r\n                    <Button title={\"All\"} callback={() => props.changeFilter('all')}/>\r\n                    <Button title={\"HightPrioritet\"} callback={() => props.changeFilter('HightPrioritet')}/>\r\n                    <Button title={\"MiddlePrioritet\"} callback={() => props.changeFilter('MiddlePrioritet')}/>\r\n                    <Button title={\"LowPrioritet\"} callback={() => props.changeFilter('LowPrioritet')}/>\r\n                    <p></p>\r\n                    <p></p>\r\n                    <Input sendName={sendName} setSendName={setSendName} clickEnter={clickEnter}/>\r\n                    <span>\r\n                  <h1>names count: {names.length}</h1>\r\n                </span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Telegram\r\n\r\n//=====================================================================\r\n//\r\n","import React, {useState} from 'react';\r\nimport style from './Menu.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype callBackType = {\r\n    callBack: () => void;\r\n    opacity: boolean\r\n}\r\n\r\nexport const Menu = (props: callBackType) => {\r\n    let[on,setOn]=useState<string|null>(null);\r\n    const onOff=(OnValue:string|null)=>{\r\n        setOn(OnValue)\r\n    }\r\n\r\n    function callBackHandler(){\r\n        props.callBack();\r\n        setOn(null)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <NavLink exact to={'/'}>  <button  onClick={callBackHandler} className={style.Menu}>Menu</button></NavLink>\r\n            {props.opacity && <NavLink to={'/monday'}>\r\n                <button onClick={()=>onOff('Monday')} className={on==='Monday'? style.MondayACtive:style.Monday}>Monday</button>\r\n            </NavLink>}\r\n            {props.opacity && <NavLink to={'/tuesday'}>\r\n            <button onClick={()=>onOff('Tuesday')} className={on==='Tuesday'?style.TuesdayActive:style.Tuesday}>Tuesday</button>\r\n            </NavLink>}\r\n        </div>\r\n    )\r\n}\r\n//===================================================================\r\n// import React, {useState} from 'react';\r\n// import style from './Menu.module.css';\r\n// import {NavLink} from \"react-router-dom\";\r\n//\r\n// type callBackType = {\r\n//     callBack: () => void;\r\n//     opacity: boolean\r\n// }\r\n//\r\n// export const Menu = (props: callBackType) => {\r\n//     let[on,setOn]=useState<string|null>(null);\r\n//     const onOff=(OnValue:string|null)=>{\r\n//         setOn(OnValue)\r\n//     }\r\n//\r\n//     function callBackHandler(){\r\n//         props.callBack();\r\n//         setOn(null)\r\n//     }\r\n//\r\n//     return (\r\n//         <div>\r\n//             <NavLink exact to={'/'}>  <button  onClick={callBackHandler} className={style.Menu}>Menu</button></NavLink>\r\n//             {props.opacity && <NavLink to={'/monday'}>\r\n//                 <button onClick={()=>onOff('Monday')} className={on==='Monday'? style.MondayACtive:style.Monday}>Monday</button>\r\n//             </NavLink>}\r\n//             {props.opacity && <NavLink to={'/tuesday'}>\r\n//                 <button onClick={()=>onOff('Tuesday')} className={on==='Tuesday'?style.TuesdayActive:style.Tuesday}>Tuesday</button>}\r\n//             </NavLink>}\r\n//         </div>\r\n//     )\r\n// }","import React, {useState, KeyboardEvent, ChangeEvent} from 'react';\r\nimport styles from './Input.module.css'\r\n\r\ntype callBackType = {\r\n    callBack: (title: string) => void\r\n}\r\n\r\nexport const InputTodolist=(props: callBackType)=>{\r\n    let [title, setTitle] = useState('')\r\n\r\n    const callBackHandler = () => {\r\n        props.callBack(title)\r\n        setTitle('')\r\n    }\r\n\r\n    const onKeyPressHandler=(event:KeyboardEvent<HTMLInputElement>)=>{\r\n        if(event.charCode === 13){\r\n            callBackHandler()\r\n        }\r\n    }\r\n\r\n    const onChangeHandler=(event:ChangeEvent<HTMLInputElement>)=>{\r\n        setTitle(event.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <input\r\n                className={!title? styles.error:styles.normal}\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n            />\r\n            <button className={styles.universal} onClick={callBackHandler}>+</button>\r\n            {!title&&<div className={styles.errorMessage}>This field is required</div>}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\ntype callBackType={\r\n    callBack:()=>void\r\n    isDone:boolean\r\n}\r\n\r\nexport const CheckBox=(props:callBackType)=>{\r\n    return(\r\n          <input onClick={props.callBack} type=\"checkbox\" checked={props.isDone}/>\r\n    )\r\n}","import React, {useState, KeyboardEvent, ChangeEvent} from 'react';\r\n\r\ntype EditableType = {\r\n    title: string\r\n    callBack:(title:string)=>void\r\n}\r\n\r\nexport const EditableSpan = (props: EditableType) => {\r\n    let [on, setOn] = useState(false);\r\n    let [title, setTitle] = useState(props.title);\r\n    const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(event.currentTarget.value);\r\n        props.callBack(title)\r\n    }\r\n    const activate = () => {\r\n        setOn(!on)\r\n    }\r\n    const deactivate = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.charCode == 13) {\r\n            setOn(false)\r\n        }\r\n    }\r\n    const deactivateOnBlur = () => {\r\n        setOn(false)\r\n    }\r\n    return !on ?\r\n        <span onDoubleClick={activate}>{props.title}</span>\r\n        :\r\n        <input value={title} autoFocus={true} onKeyPress={deactivate} onBlur={deactivateOnBlur}\r\n               onChange={onChangeHandler}/>\r\n}","import React, {useState} from 'react';\r\nimport styles from './TodoList.module.css'\r\nimport {Button} from './../common/Button'\r\nimport {InputTodolist} from \"../common/InputTodolist\";\r\nimport {CheckBox} from \"../common/CheckBox\";\r\nimport {EditableSpan} from \"../common/EditableSpan\";\r\n\r\n\r\nexport type titleType = {\r\n    id: string\r\n    title: string\r\n    filter: string\r\n    Tasks: Array<arrayType>\r\n    addTask: (title: string, todolistsID: string) => void\r\n    removeTask: (removeId: string, todolistsID: string) => void\r\n    changeFilterTodolist: (filterValue: string, todolistsId: string) => void\r\n    changeStatus: (CheckBoxId: string, todolistsID: string) => void\r\n    RemoveTodolist: (todolistsID: string) => void\r\n    saveNewTitle: (title: string, todolistsID: string, TasksID: string) => void\r\n    saveNewTitleTodolist: (title: string, todolistsID: string) => void\r\n}\r\n\r\ntype arrayType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport const TodoList = (props: titleType) => {\r\n    const addTaskHandler = (title: string) => {\r\n        props.addTask(title, props.id)\r\n    }\r\n    let saveNewTitleTodolistHandler = (title: string) => {\r\n        props.saveNewTitleTodolist(title, props.id)\r\n    }\r\n    return (\r\n        <div className={styles.TodoList}>\r\n            <Button callback={() => props.RemoveTodolist(props.id)} title={'delete'}/>\r\n            <EditableSpan callBack={saveNewTitleTodolistHandler} title={props.title}/>\r\n            <div>\r\n                <InputTodolist callBack={addTaskHandler}/>\r\n            </div>\r\n            <ul>\r\n                {\r\n                    props.Tasks.map(m => {\r\n                            const saveNewTitleHandler = (title: string) => {\r\n                                props.saveNewTitle(title, props.id, m.id)\r\n                            }\r\n                            return (\r\n                                <li key={m.id}>\r\n                                    <Button callback={() => props.removeTask(m.id, props.id)} title={'X'}/>\r\n                                    <CheckBox callBack={() => props.changeStatus(m.id, props.id)} isDone={m.isDone}/>\r\n                                    <EditableSpan callBack={saveNewTitleHandler} title={m.title}/>\r\n                                </li>\r\n                            )\r\n                        }\r\n                    )}\r\n            </ul>\r\n            <div>\r\n                <Button callback={() => props.changeFilterTodolist('All', props.id)} title={'All'}\r\n                        Filter={props.filter}/>\r\n                <Button callback={() => props.changeFilterTodolist('Active', props.id)} title={'Active'}\r\n                        Filter={props.filter}/>\r\n                <Button callback={() => props.changeFilterTodolist('Completed', props.id)} title={'Completed'}\r\n                        Filter={props.filter}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {ChangeEvent, useState} from \"react\";\r\n\r\ntype SelectType = {\r\n    // arraySkills:{value: number, skills: string}[]\r\n    arraySkills:Array<{id: number, skills: string, color?:string}>\r\n}\r\n\r\nexport const Select = (props:SelectType) => {\r\n    let [Skill,SetSkill]=useState<string|undefined>('1');\r\n    const onChangeHandler=(event:ChangeEvent<HTMLSelectElement>)=>{\r\n        SetSkill(event.currentTarget.value)\r\n    }\r\n      return (\r\n        <select value={Skill} onChange={onChangeHandler}>\r\n            <option>none</option>\r\n            {\r\n               props.arraySkills.map(m => <option value={m.id}>{m.skills}</option>)\r\n            }\r\n        </select>\r\n    )\r\n}\r\n","import React, {ChangeEvent, useState} from \"react\";\r\n\r\ntype RadioType = {\r\n    arraySkills: Array<{ id: number, skills: string, color?: string }>\r\n    title: string\r\n    arraySkillsFoo: (id: number) => void\r\n    setColor?:boolean\r\n}\r\n\r\nexport const Radio = (props: RadioType) => {\r\n    let [Skill, SetSkill] = useState<string | undefined>('1');\r\n    const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        SetSkill(event.currentTarget.value)\r\n        props.arraySkillsFoo(Number(event.currentTarget.value));\r\n    }\r\n    return (\r\n        <div>\r\n            <p>{props.title}</p>\r\n            {props.arraySkills.map(m =>\r\n                <p>\r\n                    <label>\r\n                        <input type=\"radio\" name=\"gender\" value={m.id} onChange={onChangeHandler}/>\r\n                        {props.setColor?  m.color : m.skills}\r\n                    </label>\r\n                </p>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","export type StateType = {\r\n    id: string\r\n    name: string\r\n    age: number\r\n}\r\nexport type ACType = {\r\n    type: string,\r\n    payload: string | number\r\n}\r\n\r\nexport const SortUpAC = (SortUpValue: ACType): ACType => {\r\n    return {type: 'SORT', payload: 'up'}\r\n}\r\nexport const RSortUpAC = (SortUpValue: ACType): ACType => {\r\n    return {type: 'RSORT', payload: 'up'}\r\n}\r\nexport const SortAGEAC = (SortUpValue: ACType): ACType => {\r\n    return {type: 'AGESORT', payload: 18}\r\n}\r\n\r\nexport const hwReducer = (state: Array<StateType>, action: ACType) => {\r\n    debugger\r\n    switch (action.type) {\r\n        case 'SORT':\r\n            state.sort((a, b) => {\r\n                    switch (a.name > b.name) {\r\n                        case true:\r\n                            return 1\r\n                        case false:\r\n                            return -1\r\n                        default:\r\n                            return 0\r\n                    }\r\n                }\r\n            );\r\n            return [...state];\r\n\r\n        case 'RSORT':\r\n            return [...state.sort((a, b) => {\r\n                    switch (a.name > b.name) {\r\n                        case true:\r\n                            return -1\r\n                        case false:\r\n                            return 1\r\n                        default:\r\n                            return 0\r\n                    }\r\n                }\r\n            )]\r\n        case 'AGESORT':\r\n            return [...state.filter(f => f.age > action.payload)]\r\n        default:\r\n            throw new Error('I dont know this comand');\r\n    }\r\n};","import React, { useState} from 'react';\r\nimport {ACType, hwReducer, RSortUpAC, SortAGEAC, SortUpAC, StateType} from '../common/tests/homeWorkReducer';\r\nimport './../App.css';\r\nimport {Button} from \"../common/Button\";\r\n\r\ntype stateType = {\r\n    state: Array<StateType>\r\n    SortUpValueForAction: ACType\r\n    SortDownValueForAction: ACType\r\n    SortAGEAC: ACType\r\n}\r\n\r\nexport const ArrayState = (props: stateType) => {\r\n    const [state, setState] = useState(props.state)\r\n    const sortFoo = () => {\r\n        const state = hwReducer(props.state, SortUpAC(props.SortUpValueForAction))\r\n        setState(state)\r\n    }\r\n    const RsortFoo = () => {\r\n        const state = hwReducer(props.state, RSortUpAC(props.SortDownValueForAction))\r\n        setState(state)\r\n    }\r\n    const AgeSortFoo = () => {\r\n        const state = hwReducer(props.state, SortAGEAC(props.SortAGEAC))\r\n        setState(state)\r\n    }\r\n    return (\r\n        <div >\r\n            <table className={'ArrayStateMap'}>\r\n                <tr>\r\n                    <th className={'th1'}>NAME</th>\r\n                    <th className={'th2'}>AGE</th>\r\n                </tr>\r\n                {state.map(m =>\r\n                    <tr>\r\n                        <td>{m.name}</td>\r\n                        <td>{m.age}</td>\r\n                    </tr>\r\n                )}\r\n            </table>\r\n            <div className={'buttons'}>\r\n                <Button title={'SORT'} callback={() => sortFoo()}/>\r\n                <Button title={'RSORT'} callback={() => RsortFoo()}/>\r\n                <Button title={'AGE>18'} callback={() => AgeSortFoo()}/>\r\n                {/*<button onClick={sortFoo} title={'SORT'}>SORT</button>*/}\r\n                {/*<button onClick={RsortFoo} title={'RSORT'}>RSORT</button>*/}\r\n                {/*<button onClick={AgeSortFoo} title={'AGE>18'}>AGE18</button>*/}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport styles from './../task2/TodoList.module.css'\r\nimport {Button} from \"../common/Button\";\r\n\r\nexport const Timer = () => {\r\n    let [opasityus, setOpasityus] = useState(0);\r\n\r\n    let [timerID, setTimerID] = useState<any>(new Date())\r\n    let [intervalValue, setIntervalValue] = useState<any>(null)\r\n\r\n    let setIntervalFoo = (value: string): any => {\r\n        if (value === 'stop') {\r\n            clearInterval(intervalValue)\r\n        }else{\r\n            clearInterval(intervalValue)\r\n            setIntervalValue(setInterval(() => setTimerID(new Date()), 1000));\r\n        }\r\n    }\r\n\r\n    const mouseEnter = () => {\r\n        console.log('mouse enter');\r\n        setOpasityus(1)\r\n    }\r\n    const mouseLeave = () => {\r\n        console.log('mouse leave');\r\n        setOpasityus(0)\r\n    }\r\n    const dateStyle = {\r\n        margin: '80px',\r\n        width: '150px',\r\n        height: '50px',\r\n        backgroundColor: 'white',\r\n        opacity: opasityus\r\n    }\r\n\r\n    return (\r\n        <div className={styles.border}>\r\n            <span style={dateStyle}>{new Date().getDate()}:{new Date().getUTCMonth()+1}:{new Date().getFullYear()}</span>\r\n            <div className={styles.timer} onMouseEnter={mouseEnter}\r\n                 onMouseLeave={mouseLeave}>{timerID.toLocaleTimeString()}</div>\r\n            <div className={styles.buttons}>\r\n                <Button title={'start time'} callback={() => setIntervalFoo('start')}/>\r\n                <Button title={'stop time'} callback={() => setIntervalFoo('stop')}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport styles from './Preloader.module.css'\r\nimport preloader from \"./../../assets/images/preloader.svg\";\r\n\r\nexport const Preloader=()=>{\r\n    return(\r\n        <div className={styles.flexContainer}>\r\n            <img className={styles.isFetching} src={preloader}/>\r\n        </div>\r\n    )\r\n}","import {loadingType} from \"../../App\";\r\n\r\nexport const PreloaderReducer = (state: loadingType, action: loadingACType): loadingType => {\r\n    switch (action.type) {\r\n        case 'SET_PRELOADER':\r\n            let copyState = state;\r\n            copyState = action.loading\r\n            return copyState;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype loadingACType = {\r\n    type: 'SET_PRELOADER'\r\n    loading: boolean\r\n }\r\n\r\nexport const LoadingAC = (loading: boolean): loadingACType => {\r\n    return {\r\n        type: 'SET_PRELOADER',\r\n        loading:loading\r\n    }\r\n}","import React, {ChangeEvent, useState} from 'react';\r\nimport styles from './Range.module.css';\r\n\r\nexport const Range = React.memo((props:{min:number,max:number}) => {\r\n\r\n    const [value, setValue] = useState<number>(props.min);\r\n    const onChangeCallback=(event:ChangeEvent<HTMLInputElement>)=>{\r\n        setValue(Number(event.currentTarget.value) )\r\n        console.log(value)\r\n    }\r\n    return (\r\n        <div className={styles.case}>\r\n            <span>{value}</span>\r\n            <input\r\n                type=\"range\"\r\n                min={props.min}\r\n                max={props.max}\r\n                onChange={onChangeCallback}\r\n                value={value}\r\n            />\r\n        </div>\r\n    )\r\n})","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport styles from './RangeDouble.module.css';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: 300,\r\n    },\r\n});\r\n\r\nfunction valuetext(value: number) {\r\n    return `${value}°C`;\r\n}\r\n\r\ntype PropsType={\r\n    min:number\r\n    max:number\r\n}\r\n\r\nexport let RangeDouble=React.memo( (props:PropsType)=> {\r\n    const classes = useStyles();\r\n    const [value, setValue] = React.useState<number[]>([props.max/2, props.max-props.max/3]);\r\n\r\n    const handleChange = (event: any, newValue: number | number[]) => {\r\n        setValue(newValue as number[]);\r\n    };\r\n\r\n    return (\r\n        <div className={styles.case}>\r\n        <div className={classes.root}>\r\n            <Typography id=\"range-slider\" gutterBottom>\r\n                Temperature range\r\n            </Typography>\r\n            <Slider\r\n                value={value}\r\n                min={props.min}\r\n                max={props.max}\r\n                onChange={handleChange}\r\n                valueLabelDisplay=\"auto\"\r\n                aria-labelledby=\"range-slider\"\r\n                getAriaValueText={valuetext}\r\n            />\r\n        </div>\r\n        </div>\r\n    );\r\n})","import React, {useReducer, useState} from 'react';\nimport './App.css';\nimport Telegram from \"./task1/Telegram\";\nimport {v1} from \"uuid\";\nimport {BrowserRouter, HashRouter, Route} from \"react-router-dom\";\nimport {Menu} from \"./common/Menu\";\nimport {TodoList} from \"./task2/TodoList\";\nimport {InputTodolist} from \"./common/InputTodolist\";\nimport {Select} from \"./common/Select\";\nimport {Radio} from \"./common/Radio\";\nimport {ACType, StateType} from \"./common/tests/homeWorkReducer\";\nimport {ArrayState} from \"./task2/ArrayState\";\nimport {Timer} from \"./task2/Timer\";\nimport styles from \"./task2/TodoList.module.css\";\nimport {Preloader} from \"./common/Preloader/Preloader\";\nimport {Button} from \"./common/Button\";\nimport {LoadingAC, PreloaderReducer} from \"./common/Preloader/PreloaderReducer\";\nimport {Range} from \"./common/Range/Range\";\nimport {RangeDouble} from \"./common/RangeDouble/RangeDouble\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"./store/store\";\nimport {setThemeAC} from \"./reducers/ThemeReducer\";\n\nexport type todolistsType = {\n    id: string\n    title: string\n    filter: string\n}\nconst Todolist1 = v1();\nconst Todolist2 = v1();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexport type loadingType = boolean;\n\nfunction App() {\n    //for Preloader----------------------------------------------------\n    let [show, setShow] = useState(false)\n    let [loading, setDispatchLoading] = useReducer(PreloaderReducer, false);//по умолчанию не прказывает прелодер\n    const setPreloader = () => {\n        setShow(true)\n        setDispatchLoading(LoadingAC(true))//показывай прелодер\n        setTimeout(() => {\n            setDispatchLoading(LoadingAC(false))//не показывай прелодер черех 3 сек.\n        }, 3000);\n    }\n\n    //for TELEGRAM------------------------------------------------------\n    let [arQualities, setarQualities] = useState(\n        [\n            {id: v1(), toDo: 'JS work', prioritet: 'hight'},\n            {id: v1(), toDo: 'watch TV', prioritet: 'low'},\n            {id: v1(), toDo: 'games', prioritet: 'middle'},\n            {id: v1(), toDo: 'React', prioritet: 'hight'},\n            {id: v1(), toDo: 'HTMl', prioritet: 'low'},\n        ]\n    )\n\n    function Delete(id: string) {\n        let newArQualities = arQualities.filter(f => f.id !== id)\n        setarQualities(newArQualities)\n    }\n\n    let [filtered, setFiltered] = useState('All')\n    let filteredarQualities = arQualities;\n    if (filtered === 'HightPrioritet') {\n        filteredarQualities = arQualities.filter(f => f.prioritet === 'hight');\n    }\n    if (filtered === 'MiddlePrioritet') {\n        filteredarQualities = arQualities.filter(f => f.prioritet === 'middle');\n    }\n    if (filtered === 'LowPrioritet') {\n        filteredarQualities = arQualities.filter(f => f.prioritet === 'low');\n    }\n\n    function changeFilter(value: string) {\n        setFiltered(value)\n    }\n\n    let [opacity, setOpacity] = useState<boolean>(false)\n\n    function MenuFoo(opacityValue: boolean) {\n        setOpacity(opacityValue)\n    }\n\n    //for TODOLIST------------------------------------------------------\n    let [todolists, setTodolists] = useState<Array<todolistsType>>([\n        {\n            id: Todolist1,\n            title: 'What to learn',\n            filter: 'All'\n        },\n        {\n            id: Todolist2,\n            title: 'What to buy',\n            filter: 'All'\n        },\n    ])\n    let [Tasks, setTasks] = useState(\n        {\n            [Todolist1]: [\n                {id: v1(), title: 'HTML&CSS', isDone: true},\n                {id: v1(), title: 'JS', isDone: false},\n                {id: v1(), title: 'React', isDone: false}\n            ],\n            [Todolist2]: [\n                {id: v1(), title: 'HTML&CSS', isDone: true},\n                {id: v1(), title: 'JS', isDone: false},\n                {id: v1(), title: 'React', isDone: false}\n            ]\n        });\n    const addTodolist = (title: string) => {\n        let newTodolistId = v1();\n        let newTodolist: todolistsType = {id: newTodolistId, title: title, filter: 'All'};\n        setTodolists([newTodolist, ...todolists])\n        setTasks({...Tasks, [newTodolistId]: []})\n    }\n    const RemoveTodolist = (todolistsID: string) => {\n        setTodolists(todolists.filter(f => f.id !== todolistsID))\n    }\n    const addTask = (title: string, todolistsID: string) => {\n        let todolist = Tasks[todolistsID];\n        if (title.trim() !== '') {\n            let newTasks = {id: v1(), title: title, isDone: true}\n            Tasks[todolistsID] = [newTasks, ...todolist]\n            setTasks({...Tasks})\n        }\n    }\n    let removeTask = (removeId: string, todolistsID: string) => {\n        let todolist = Tasks[todolistsID];\n        Tasks[todolistsID] = todolist.filter(f => f.id !== removeId)\n        setTasks({...Tasks})\n    }\n    const changeFilterTodolist = (filterValue: string, todolistsId: string) => {\n        let todolist = todolists.find(f => f.id == todolistsId);\n        if (todolist) {\n            todolist.filter = filterValue;\n            setTodolists([...todolists])\n        }\n    }\n    const changeStatus = (CheckBoxId: string, todolistsID: string) => {\n        let todolist = Tasks[todolistsID];\n        let changeStatusValue = Tasks[todolistsID].find(f => f.id === CheckBoxId);\n        if (changeStatusValue) {\n            changeStatusValue.isDone = !changeStatusValue.isDone\n            setTasks({...Tasks})\n        }\n    }\n    const saveNewTitleTodolist = (title: string, todolistsID: string) => {\n        let todolist = todolists.find(f => f.id == todolistsID);\n        if (todolist) {\n            todolist.title = title;\n            setTodolists([...todolists])\n        }\n    }\n    const saveNewTitle = (title: string, todolistsID: string, TasksID: string) => {\n        let todolist = Tasks[todolistsID];\n        let task = todolist.find(f => f.id === TasksID);\n        if (task) {\n            task.title = title\n            setTasks({...Tasks})\n        }\n    }\n    //for TODOLIST------------selectComponent\n    let arraySkills = [\n        {\n            id: 1,\n            skills: 'Junior',\n            color: '  dimgray'\n        },\n        {\n            id: 2,\n            skills: 'Middle',\n            color: '  deeppink'\n        },\n        {\n            id: 3,\n            skills: 'Senior',\n            color: '  lightskyblue'\n        }\n    ];\n    let color=useSelector<AppRootStateType,string>(state => state.color);\n    let dispatch=useDispatch();\n       const arraySkillsFoo = (id: number) => {\n        console.log(id);\n        dispatch(setThemeAC(id));\n           }\n\n    //for STATEreducer----------------------\n    const startState: Array<StateType> = [\n        {id: v1(), name: \"Igor\", age: 41},\n        {id: v1(), name: \"Olga\", age: 39},\n        {id: v1(), name: \"Sasha\", age: 11},\n        {id: v1(), name: \"Nadka\", age: 4},\n    ]\n    let SortUpValueForAction = {type: 'SORT', payload: 'up'};\n    let SortDownValueForAction = {type: 'RSORT', payload: 'up'};\n    const SortAGEAC = {type: 'AGESORT', payload: 18}\n\n    return (\n        <div className={color}>\n            <div className=\"App\">\n                <BrowserRouter>\n                    <div className={'RadioStylesForBackGround'}>\n                        <Radio\n                            arraySkills={arraySkills}\n                            title={'Please select color theme: '}\n                            arraySkillsFoo={arraySkillsFoo}\n                            setColor={true}\n                        />\n                    </div>\n                    <Menu callBack={() => MenuFoo(!opacity)} opacity={opacity}/>\n                    <Route path={'/monday'} render={() =>\n                        <div className={'general'}>\n                            <Telegram\n                                name='Sasha'\n                                surName='Yudintsev'\n                                arQualities={filteredarQualities}\n                                Delete={Delete}\n                                changeFilter={changeFilter}\n                            />\n                        </div>\n                    }\n                    />\n\n                    <Route path={'/tuesday'} render={() => {\n                        return (\n                            <div className={'general'}>\n                                <div className={'setPreloader'}>\n                                    <Button title={'setPreloader'} callback={() => setPreloader()}/>\n                                </div>\n                                {loading && <Preloader/>}\n                                {!loading && show && <div className={'lineTodolist'}>\n                                    <div className={'InputTodolistStyle'}><InputTodolist callBack={addTodolist}/></div>\n                                    {todolists.map(m => {\n                                        let tasksLayer = Tasks[m.id];\n                                        if (m.filter === 'Active') {\n                                            tasksLayer = Tasks[m.id].filter(f => f.isDone === false)\n                                        }\n                                        if (m.filter === 'Completed') {\n                                            tasksLayer = Tasks[m.id].filter(f => f.isDone === true)\n                                        }\n                                        return (\n                                            <TodoList\n                                                id={m.id}\n                                                title={m.title}\n                                                Tasks={tasksLayer}\n                                                RemoveTodolist={RemoveTodolist}\n                                                filter={m.filter}\n                                                addTask={addTask}\n                                                removeTask={removeTask}\n                                                changeFilterTodolist={changeFilterTodolist}\n                                                changeStatus={changeStatus}\n                                                saveNewTitleTodolist={saveNewTitleTodolist}\n                                                saveNewTitle={saveNewTitle}\n                                            />\n                                        )\n                                    })}\n                                </div>}\n                                {!loading && show && <div className={'leftSide'}>\n                                    <div className={'SelectStyles'}><Select arraySkills={arraySkills}/></div>\n                                    <div className={'RadioStyles'}>\n                                        <Radio\n                                            arraySkills={arraySkills}\n                                            title={'Please select your SKILL: '}\n                                            arraySkillsFoo={arraySkillsFoo}\n                                        />\n                                    </div>\n                                    <div className={'ArrayState'}>\n                                        <ArrayState\n                                        state={startState}\n                                        SortUpValueForAction={SortUpValueForAction}\n                                        SortDownValueForAction={SortDownValueForAction}\n                                        SortAGEAC={SortAGEAC}\n                                    /></div>\n                                    <div className={'timerModule'}><Timer/></div>\n                                </div>}\n                                <Range min={200} max={300}/>\n                                <RangeDouble min={200} max={1000}/>\n                            </div>\n                        )\n                    }\n                    }>\n                    </Route>\n                </BrowserRouter>\n            </div>\n        </div>\n    );\n}\n\nexport default App\n","export let initialState = 'lightskyblue';\r\n\r\nexport const ThemeReducer = (state = initialState, action: setThemeACType): string => {\r\n    switch (action.type) {\r\n        case 'SET-THEME':\r\n        {\r\n            if (action.mId== 1) {\r\n                state='  dimgray'\r\n            }\r\n            if (action.mId==2) {\r\n                state='  deeppink'\r\n            }\r\n            if (action.mId == 3) {\r\n                state='  lightskyblue'\r\n            }\r\n            return state;\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport type setThemeACType = {\r\n    type: 'SET-THEME',\r\n    mId: number\r\n}\r\nexport const setThemeAC = (mId: number): setThemeACType => {\r\n    return {\r\n        type: 'SET-THEME',\r\n        mId: mId\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers, createStore} from \"redux\";\r\nimport {ThemeReducer} from \"../reducers/ThemeReducer\";\r\n\r\nconst rootReducer=combineReducers({\r\n    color:ThemeReducer\r\n})\r\n\r\nexport const store=createStore(rootReducer);\r\nexport type AppRootStateType=ReturnType<typeof rootReducer>","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store/store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n     </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}