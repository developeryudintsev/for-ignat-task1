{"version":3,"sources":["task1/TelegramStyles.module.css","common/Menu.module.css","common/Button.module.css","task2/TodoList.module.css","common/Button.tsx","common/Input.tsx","task1/Telegram.tsx","common/Menu.tsx","common/InputTodolist.tsx","common/CheckBox.tsx","common/EditableSpan.tsx","task2/TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx","common/Input.module.css"],"names":["module","exports","Button","props","className","Filter","title","styles","colorFilter","universalButton","onClick","callback","Input","useState","error","setError","onAddTaskClick","sendName","trim","clickEnter","universal","type","value","onChange","event","setSendName","currentTarget","onKeyPress","charCode","Telegram","id","v1","name","names","setNames","console","log","style","wrapper","telega","surName","tt","arQualities","map","m","key","prioritet","class1","class2","toDo","Delete","changeFilter","length","alert","recordName","NamesFoo","Menu","on","setOn","onOff","OnValue","exact","to","callBack","opacity","MondayACtive","Monday","TuesdayActive","Tuesday","InputTodolist","setTitle","callBackHandler","normal","errorMessage","CheckBox","checked","isDone","EditableSpan","autoFocus","onBlur","onDoubleClick","TodoList","RemoveTodolist","saveNewTitleTodolist","addTask","Tasks","removeTask","changeStatus","saveNewTitle","changeFilterTodolist","filter","Todolist1","Todolist2","App","setarQualities","newArQualities","f","filtered","setFiltered","filteredarQualities","setOpacity","todolists","setTodolists","setTasks","addTodolist","newTodolistId","todolistsID","todolist","newTasks","removeId","filterValue","todolistsId","find","CheckBoxId","changeStatusValue","TasksID","task","path","render","tasksLayer","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.6c0f7c15.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"telega\":\"TelegramStyles_telega__ZoKJK\",\"class1\":\"TelegramStyles_class1__1knsX\",\"class2\":\"TelegramStyles_class2__3XOFT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Menu\":\"Menu_Menu__2YIBy\",\"Monday\":\"Menu_Monday__2oDlu\",\"Tuesday\":\"Menu_Tuesday__u7Kuz\",\"MondayACtive\":\"Menu_MondayACtive__1BN8z\",\"TuesdayActive\":\"Menu_TuesdayActive__1rIYg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"universalButton\":\"Button_universalButton__2PvYt\",\"orangeButton\":\"Button_orangeButton__3Vxh5\",\"colorFilter\":\"Button_colorFilter__3Ke4j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TodoList\":\"TodoList_TodoList__2Izhb\"};","import React from \"react\";\r\nimport styles from './Button.module.css'\r\n\r\ntype ButtonPropsType = {\r\n    title: string\r\n    callback: () => void\r\n    Filter?:string\r\n}\r\n\r\nexport const Button = (props:ButtonPropsType) => {\r\n    return (\r\n        <button className={props.Filter==props.title? styles.colorFilter:styles.universalButton}\r\n                onClick={props.callback}>{props.title}</button>\r\n    )\r\n}\r\n","import React, {useState, ChangeEvent, KeyboardEvent} from \"react\";\r\nimport styles from './Input.module.css'\r\nimport {Button} from \"../common/Button\";\r\n\r\ntype InputPropsType = {\r\n    sendName: string\r\n    setSendName: (value: string) => void\r\n    clickEnter: (value: string) => void\r\n}\r\n\r\nexport const Input = (props: InputPropsType) => {\r\n    let [error, setError] = useState<string | null>(null);\r\n    const onChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setError('');\r\n                props.setSendName(event.currentTarget.value)\r\n    };\r\n\r\n    const onKeyPress = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.charCode === 13) {\r\n            props.clickEnter(props.sendName);\r\n            onAddTaskClick();\r\n        }\r\n    };\r\n\r\n    function onAddTaskClick() {\r\n        if (props.sendName.trim() !== '') {\r\n            props.clickEnter(props.sendName);\r\n            setError('')\r\n        } else {\r\n            setError(' Title is required')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <input className={props.sendName ? styles.universal : styles.error} type=\"text\" value={props.sendName}\r\n                   onChange={onChange}\r\n                   onKeyPress={onKeyPress}\r\n            />\r\n\r\n            <Button title={'SEND'} callback={() => {\r\n                onAddTaskClick()\r\n            }}/>\r\n            {<div className=\"error-message\">{error}</div>}\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport style from './TelegramStyles.module.css';\r\nimport {v1} from \"uuid\";\r\nimport {Button} from \"../common/Button\";\r\nimport {Input} from \"../common/Input\";\r\nimport {Menu} from \"../common/Menu\";\r\n\r\ntype ITelegram = {\r\n    name: string,\r\n    surName: string,\r\n    arQualities: Array<InArray>\r\n    Delete: (id: string) => void;\r\n    changeFilter: (value: string) => void;\r\n}\r\ntype InArray = {\r\n    id: string,\r\n    toDo: string,\r\n    prioritet: string,\r\n}\r\n\r\nexport function Telegram(props: ITelegram) {\r\n    let [sendName, setSendName] = useState('');\r\n    let [names, setNames] = useState([\r\n        {id: v1(), name: 'Sasha Yudintsev'}\r\n    ])\r\n    console.log(names)\r\n    let counter = 1;\r\n    let sum = 1;\r\n\r\n    function clickEnter(sendName: string) {\r\n        if (sendName.length >= 3) {\r\n            alert('Hi USER ' + sendName);\r\n            NamesFoo(sendName);\r\n        }\r\n        setSendName('')\r\n    }\r\n\r\n    function NamesFoo(sendName: string) {\r\n        let recordName = {id: v1(), name: sendName};\r\n        setNames([recordName, ...names]);\r\n        console.log(names.length + 1)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n                <div className={style.wrapper}>\r\n                <div className={style.telega}>\r\n                    <p></p>\r\n                    <div>{props.name}</div>\r\n                    <div>{props.surName}</div>\r\n                    <hr/>\r\n\r\n                    <table className={style.tt}>\r\n                        <th>TODO</th>\r\n                        <th>PRIORITET</th>\r\n                    </table>\r\n                    <table>\r\n                        {props.arQualities.map(m =>\r\n                            <div key={m.id}\r\n                                 className={m.prioritet === 'hight' ? style.class1 : style.class2}>\r\n                                <tr>\r\n                                    <td>{m.toDo}</td>\r\n                                    <td>{m.prioritet}</td>\r\n                                    <Button title={\"delete\"} callback={() => {\r\n                                        props.Delete(m.id)\r\n                                    }}/>\r\n                                </tr>\r\n                            </div>)}\r\n                    </table>\r\n                    <p></p>\r\n                    <Button title={\"All\"} callback={() => props.changeFilter('all')}/>\r\n                    <Button title={\"HightPrioritet\"} callback={() => props.changeFilter('HightPrioritet')}/>\r\n                    <Button title={\"MiddlePrioritet\"} callback={() => props.changeFilter('MiddlePrioritet')}/>\r\n                    <Button title={\"LowPrioritet\"} callback={() => props.changeFilter('LowPrioritet')}/>\r\n                    <p></p>\r\n                    <p></p>\r\n                    <Input sendName={sendName} setSendName={setSendName} clickEnter={clickEnter}/>\r\n                    <span>\r\n                  <h1>names count: {names.length}</h1>\r\n                </span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Telegram\r\n\r\n","import React, {useState} from 'react';\r\nimport style from './Menu.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype callBackType = {\r\n    callBack: () => void;\r\n    opacity: boolean\r\n}\r\n\r\nexport const Menu = (props: callBackType) => {\r\n    let[on,setOn]=useState<string|null>(null);\r\n    const onOff=(OnValue:string|null)=>{\r\n        setOn(OnValue)\r\n    }\r\n\r\n    function callBackHandler(){\r\n        props.callBack();\r\n        setOn(null)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <NavLink exact to={'/'}>  <button  onClick={callBackHandler} className={style.Menu}>Menu</button></NavLink>\r\n            {props.opacity && <NavLink to={'/monday'}>\r\n                <button onClick={()=>onOff('Monday')} className={on==='Monday'? style.MondayACtive:style.Monday}>Monday</button>\r\n            </NavLink>}\r\n            {props.opacity && <NavLink to={'/tuesday'}>\r\n            <button onClick={()=>onOff('Tuesday')} className={on==='Tuesday'?style.TuesdayActive:style.Tuesday}>Tuesday</button>\r\n            </NavLink>}\r\n        </div>\r\n    )\r\n}\r\n//===================================================================\r\n// import React, {useState} from 'react';\r\n// import style from './Menu.module.css';\r\n// import {NavLink} from \"react-router-dom\";\r\n//\r\n// type callBackType = {\r\n//     callBack: () => void;\r\n//     opacity: boolean\r\n// }\r\n//\r\n// export const Menu = (props: callBackType) => {\r\n//     let[on,setOn]=useState<string|null>(null);\r\n//     const onOff=(OnValue:string|null)=>{\r\n//         setOn(OnValue)\r\n//     }\r\n//\r\n//     function callBackHandler(){\r\n//         props.callBack();\r\n//         setOn(null)\r\n//     }\r\n//\r\n//     return (\r\n//         <div>\r\n//             <NavLink exact to={'/'}>  <button  onClick={callBackHandler} className={style.Menu}>Menu</button></NavLink>\r\n//             {props.opacity && <NavLink to={'/monday'}>\r\n//                 <button onClick={()=>onOff('Monday')} className={on==='Monday'? style.MondayACtive:style.Monday}>Monday</button>\r\n//             </NavLink>}\r\n//             {props.opacity && <NavLink to={'/tuesday'}>\r\n//                 <button onClick={()=>onOff('Tuesday')} className={on==='Tuesday'?style.TuesdayActive:style.Tuesday}>Tuesday</button>}\r\n//             </NavLink>}\r\n//         </div>\r\n//     )\r\n// }","import React, {useState, KeyboardEvent, ChangeEvent} from 'react';\r\nimport styles from './Input.module.css'\r\n\r\ntype callBackType = {\r\n    callBack: (title: string) => void\r\n}\r\n\r\nexport const InputTodolist=(props: callBackType)=>{\r\n    let [title, setTitle] = useState('')\r\n\r\n    const callBackHandler = () => {\r\n        props.callBack(title)\r\n        setTitle('')\r\n    }\r\n\r\n    const onKeyPressHandler=(event:KeyboardEvent<HTMLInputElement>)=>{\r\n        if(event.charCode === 13){\r\n            callBackHandler()\r\n        }\r\n    }\r\n\r\n    const onChangeHandler=(event:ChangeEvent<HTMLInputElement>)=>{\r\n        setTitle(event.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <input\r\n                className={!title? styles.error:styles.normal}\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n            />\r\n            <button className={styles.universal} onClick={callBackHandler}>+</button>\r\n            {!title&&<div className={styles.errorMessage}>This field is required</div>}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\ntype callBackType={\r\n    callBack:()=>void\r\n    isDone:boolean\r\n}\r\n\r\nexport const CheckBox=(props:callBackType)=>{\r\n    return(\r\n          <input onClick={props.callBack} type=\"checkbox\" checked={props.isDone}/>\r\n    )\r\n}","import React, {useState, KeyboardEvent, ChangeEvent} from 'react';\r\n\r\ntype EditableType = {\r\n    title: string\r\n    callBack:(title:string)=>void\r\n}\r\n\r\nexport const EditableSpan = (props: EditableType) => {\r\n    let [on, setOn] = useState(false);\r\n    let [title, setTitle] = useState(props.title);\r\n    const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(event.currentTarget.value);\r\n        props.callBack(title)\r\n    }\r\n    const activate = () => {\r\n        setOn(!on)\r\n    }\r\n    const deactivate = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.charCode == 13) {\r\n            setOn(false)\r\n        }\r\n    }\r\n    const deactivateOnBlur = () => {\r\n        setOn(false)\r\n    }\r\n    return !on ?\r\n        <span onDoubleClick={activate}>{props.title}</span>\r\n        :\r\n        <input value={title} autoFocus={true} onKeyPress={deactivate} onBlur={deactivateOnBlur}\r\n               onChange={onChangeHandler}/>\r\n}","import React, {useState} from 'react';\r\nimport styles from './TodoList.module.css'\r\nimport {Button} from './../common/Button'\r\n\r\nimport {InputTodolist} from \"../common/InputTodolist\";\r\nimport {CheckBox} from \"../common/CheckBox\";\r\nimport {EditableSpan} from \"../common/EditableSpan\";\r\n\r\ntype titleType = {\r\n    id: string\r\n    title: string\r\n    filter: string\r\n    Tasks: Array<arrayType>\r\n    addTask: (title: string, todolistsID: string) => void\r\n    removeTask: (removeId: string, todolistsID: string) => void\r\n    changeFilterTodolist: (filterValue: string, todolistsId: string) => void\r\n    changeStatus: (CheckBoxId: string, todolistsID: string) => void\r\n    RemoveTodolist: (todolistsID: string) => void;\r\n    saveNewTitle: (title: string, todolistsID: string, TasksID: string) => void\r\n    saveNewTitleTodolist: (title: string, todolistsID: string) => void\r\n}\r\n\r\ntype arrayType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport const TodoList = (props: titleType) => {\r\n    const addTaskHandler = (title: string) => {\r\n        props.addTask(title, props.id)\r\n    }\r\n\r\n    let saveNewTitleTodolistHandler = (title: string) => {\r\n        props.saveNewTitleTodolist(title, props.id)\r\n    }\r\n    return (\r\n        <div className={styles.TodoList}>\r\n            <Button callback={() => props.RemoveTodolist(props.id)} title={'delete'}/>\r\n            <EditableSpan callBack={saveNewTitleTodolistHandler} title={props.title}/>\r\n            <div>\r\n                <InputTodolist callBack={addTaskHandler}/>\r\n            </div>\r\n            <ul>\r\n                {\r\n                    props.Tasks.map(m =>\r\n                    {\r\n                        const saveNewTitleHandler = (title: string) => {\r\n                            props.saveNewTitle(title, props.id, m.id)\r\n                        }\r\n                        return(\r\n                            <li key={m.id}>\r\n                                <Button callback={() => props.removeTask(m.id, props.id)} title={'X'}/>\r\n                                <CheckBox callBack={() => props.changeStatus(m.id, props.id)} isDone={m.isDone}/>\r\n                                <EditableSpan callBack={saveNewTitleHandler} title={m.title}/>\r\n                            </li>\r\n                        )\r\n                    }\r\n                    )}\r\n            </ul>\r\n            <div>\r\n                <Button callback={() => props.changeFilterTodolist('All', props.id)} title={'All'}\r\n                        Filter={props.filter}/>\r\n                <Button callback={() => props.changeFilterTodolist('Active', props.id)} title={'Active'}\r\n                        Filter={props.filter}/>\r\n                <Button callback={() => props.changeFilterTodolist('Completed', props.id)} title={'Completed'}\r\n                        Filter={props.filter}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n//======================================================================\r\n\r\n// import React, {useState} from 'react';\r\n// import styles from './TodoList.module.css'\r\n// import {Button} from './../common/Button'\r\n//\r\n// import {InputTodolist} from \"../common/InputTodolist\";\r\n// import {CheckBox} from \"../common/CheckBox\";\r\n// import {EditableSpan} from \"../common/EditableSpan\";\r\n//\r\n// type titleType = {\r\n//     id: string\r\n//     title: string\r\n//     filter: string\r\n//     Tasks: Array<arrayType>\r\n//     addTask: (title: string, todolistsID: string) => void\r\n//     removeTask: (removeId: string, todolistsID: string) => void\r\n//     changeFilterTodolist: (filterValue: string, todolistsId: string) => void\r\n//     changeStatus: (CheckBoxId: string, todolistsID: string) => void\r\n//     RemoveTodolist: (todolistsID: string) => void;\r\n//     saveNewTitleTodolist: (title: string, todolistsID: string) => void\r\n// }\r\n//\r\n// type arrayType = {\r\n//     id: string\r\n//     title: string\r\n//     isDone: boolean\r\n// }\r\n//\r\n// export const TodoList = (props: titleType) => {\r\n//     const addTaskHandler = (title: string) => {\r\n//         props.addTask(title, props.id)\r\n//     }\r\n//\r\n//     let saveNewTitleTodolistHandler = (title: string) => {\r\n//         props.saveNewTitleTodolist(title, props.id)\r\n//     }\r\n//     return (\r\n//         <div className={styles.TodoList}>\r\n//             <Button callback={() => props.RemoveTodolist(props.id)} title={'delete'}/>\r\n//             <EditableSpan callBack={saveNewTitleTodolistHandler} title={props.title}/>\r\n//             <div>\r\n//                 <InputTodolist callBack={addTaskHandler}/>\r\n//             </div>\r\n//             <ul>\r\n//                 {\r\n//                     props.Tasks.map(m =>\r\n//                         <li key={m.id}>\r\n//                             <Button callback={() => props.removeTask(m.id, props.id)} title={'X'}/>\r\n//                             <CheckBox callBack={() => props.changeStatus(m.id, props.id)} isDone={m.isDone}/>\r\n//                             <span>{m.title}</span></li>\r\n//                     )\r\n//                 }\r\n//             </ul>\r\n//             <div>\r\n//                 <Button callback={() => props.changeFilterTodolist('All', props.id)} title={'All'}\r\n//                         Filter={props.filter}/>\r\n//                 <Button callback={() => props.changeFilterTodolist('Active', props.id)} title={'Active'}\r\n//                         Filter={props.filter}/>\r\n//                 <Button callback={() => props.changeFilterTodolist('Completed', props.id)} title={'Completed'}\r\n//                         Filter={props.filter}/>\r\n//             </div>\r\n//         </div>\r\n//     )\r\n// }","import React, {useState} from 'react';\nimport './App.css';\nimport Telegram from \"./task1/Telegram\";\nimport {v1} from \"uuid\";\nimport {BrowserRouter, HashRouter, Route} from \"react-router-dom\";\nimport {Menu} from \"./common/Menu\";\nimport {TodoList} from \"./task2/TodoList\";\nimport {InputTodolist} from \"./common/InputTodolist\";\n\ntype todolistsType = {\n    id: string\n    title: string\n    filter: string\n}\nconst Todolist1 = v1();\nconst Todolist2 = v1();\n\n\nfunction App() {\n\n    //for TELEGRAM------------------------------------------------------\n    let [arQualities, setarQualities] = useState(\n        [\n            {id: v1(), toDo: 'JS work', prioritet: 'hight'},\n            {id: v1(), toDo: 'watch TV', prioritet: 'low'},\n            {id: v1(), toDo: 'games', prioritet: 'middle'},\n            {id: v1(), toDo: 'React', prioritet: 'hight'},\n            {id: v1(), toDo: 'HTMl', prioritet: 'low'},\n        ]\n    )\n\n    function Delete(id: string) {\n        let newArQualities = arQualities.filter(f => f.id !== id)\n        setarQualities(newArQualities)\n    }\n\n    let [filtered, setFiltered] = useState('All')\n    let filteredarQualities = arQualities;\n    if (filtered === 'HightPrioritet') {\n        filteredarQualities = arQualities.filter(f => f.prioritet === 'hight');\n    }\n    if (filtered === 'MiddlePrioritet') {\n        filteredarQualities = arQualities.filter(f => f.prioritet === 'middle');\n    }\n    if (filtered === 'LowPrioritet') {\n        filteredarQualities = arQualities.filter(f => f.prioritet === 'low');\n    }\n\n    function changeFilter(value: string) {\n        setFiltered(value)\n    }\n\n    let [opacity, setOpacity] = useState<boolean>(false)\n\n    function MenuFoo(opacityValue: boolean) {\n        setOpacity(opacityValue)\n    }\n\n    //for TODOLIST------------------------------------------------------\n\n    let [todolists, setTodolists] = useState<Array<todolistsType>>([\n        {\n            id: Todolist1,\n            title: 'What to learn',\n            filter: 'All'\n        },\n        {\n            id: Todolist2,\n            title: 'What to buy',\n            filter: 'All'\n        },\n    ])\n\n    let [Tasks, setTasks] = useState(\n        {\n            [Todolist1]: [\n                {id: v1(), title: 'HTML&CSS', isDone: true},\n                {id: v1(), title: 'JS', isDone: false},\n                {id: v1(), title: 'React', isDone: false}\n            ],\n            [Todolist2]: [\n                {id: v1(), title: 'HTML&CSS', isDone: true},\n                {id: v1(), title: 'JS', isDone: false},\n                {id: v1(), title: 'React', isDone: false}\n            ]\n        });\n\n    const addTodolist = (title: string) => {\n        let newTodolistId = v1();\n        let newTodolist: todolistsType = {id: newTodolistId, title: title, filter: 'All'};\n        setTodolists([newTodolist, ...todolists])\n        setTasks({...Tasks, [newTodolistId]: []})\n    }\n    const RemoveTodolist = (todolistsID: string) => {\n        setTodolists(todolists.filter(f => f.id !== todolistsID))\n    }\n    const addTask = (title: string, todolistsID: string) => {\n        let todolist = Tasks[todolistsID];\n        if (title.trim() !== '') {\n            let newTasks = {id: v1(), title: title, isDone: true}\n            Tasks[todolistsID] = [newTasks, ...todolist]\n            setTasks({...Tasks})\n        }\n    }\n    let removeTask = (removeId: string, todolistsID: string) => {\n        let todolist = Tasks[todolistsID];\n        Tasks[todolistsID] = todolist.filter(f => f.id !== removeId)\n        setTasks({...Tasks})\n    }\n    const changeFilterTodolist = (filterValue: string, todolistsId: string) => {\n        let todolist = todolists.find(f => f.id == todolistsId);\n        if (todolist) {\n            todolist.filter = filterValue;\n            setTodolists([...todolists])\n        }\n    }\n    const changeStatus = (CheckBoxId: string, todolistsID: string) => {\n        let todolist = Tasks[todolistsID];\n        let changeStatusValue = Tasks[todolistsID].find(f => f.id === CheckBoxId);\n        if (changeStatusValue) {\n            changeStatusValue.isDone = !changeStatusValue.isDone\n            setTasks({...Tasks})\n        }\n    }\n    const saveNewTitleTodolist = (title: string, todolistsID: string) => {\n        let todolist = todolists.find(f => f.id == todolistsID);\n        if (todolist) {\n            todolist.title = title;\n            setTodolists([...todolists])\n        }\n    }\n    const saveNewTitle = (title: string, todolistsID: string, TasksID: string) => {\n        let todolist = Tasks[todolistsID];\n        let task = todolist.find(f => f.id === TasksID);\n        if (task) {\n            task.title = title\n            setTasks({...Tasks})\n        }\n    }\n    return (\n        <div>\n            <div className=\"App\">\n                <BrowserRouter>\n                    <Menu callBack={() => MenuFoo(!opacity)} opacity={opacity}/>\n                    <Route path={'/monday'} render={() => <Telegram\n                        name='Sasha'\n                        surName='Yudintsev'\n                        arQualities={filteredarQualities}\n                        Delete={Delete}\n                        changeFilter={changeFilter}\n                    />}/>\n\n                    <Route path={'/tuesday'} render={() => {\n                        return (\n                            <div className={'lineTodolist'}>\n                                <div className={'InputTodolistStyle'}><InputTodolist callBack={addTodolist}/></div>\n                                {todolists.map(m => {\n                                    let tasksLayer = Tasks[m.id];\n                                    if (m.filter === 'Active') {\n                                        tasksLayer = Tasks[m.id].filter(f => f.isDone === false)\n                                    }\n                                    if (m.filter === 'Completed') {\n                                        tasksLayer = Tasks[m.id].filter(f => f.isDone === true)\n                                    }\n                                    return (\n                                        <TodoList\n                                            id={m.id}\n                                            title={m.title}\n                                            Tasks={tasksLayer}\n                                            RemoveTodolist={RemoveTodolist}\n                                            filter={m.filter}\n                                            addTask={addTask}\n                                            removeTask={removeTask}\n                                            changeFilterTodolist={changeFilterTodolist}\n                                            changeStatus={changeStatus}\n                                            saveNewTitleTodolist={saveNewTitleTodolist}\n                                            saveNewTitle={saveNewTitle}\n                                        />\n                                    )\n                                })}\n                            </div>\n                        )\n                    }\n\n                    }>\n                    </Route>\n                </BrowserRouter>\n            </div>\n        </div>\n    );\n}\n\nexport default App\n\n//==============================\n// <InputTodolist callBack={addTodolist}/>\n\n\n// import React, {useState} from 'react';\n// import './App.css';\n// import Telegram from \"./task1/Telegram\";\n// import {v1} from \"uuid\";\n// import {BrowserRouter, HashRouter, Route} from \"react-router-dom\";\n// import {Menu} from \"./common/Menu\";\n// import {TodoList} from \"./task2/TodoList\";\n//\n// type todolistsType = {\n//     id: string\n//     title: string\n//     filter: string\n// }\n// const Todolist1 = v1();\n// const Todolist2 = v1();\n//\n//\n// function App() {\n//\n//     //for TELEGRAM------------------------------------------------------\n//     let [arQualities, setarQualities] = useState(\n//         [\n//             {id: v1(), toDo: 'JS work', prioritet: 'hight'},\n//             {id: v1(), toDo: 'watch TV', prioritet: 'low'},\n//             {id: v1(), toDo: 'games', prioritet: 'middle'},\n//             {id: v1(), toDo: 'React', prioritet: 'hight'},\n//             {id: v1(), toDo: 'HTMl', prioritet: 'low'},\n//         ]\n//     )\n//\n//     function Delete(id: string) {\n//         let newArQualities = arQualities.filter(f => f.id !== id)\n//         setarQualities(newArQualities)\n//     }\n//\n//     let [filtered, setFiltered] = useState('All')\n//     let filteredarQualities = arQualities;\n//     if (filtered === 'HightPrioritet') {\n//         filteredarQualities = arQualities.filter(f => f.prioritet === 'hight');\n//     }\n//     if (filtered === 'MiddlePrioritet') {\n//         filteredarQualities = arQualities.filter(f => f.prioritet === 'middle');\n//     }\n//     if (filtered === 'LowPrioritet') {\n//         filteredarQualities = arQualities.filter(f => f.prioritet === 'low');\n//     }\n//\n//     function changeFilter(value: string) {\n//         setFiltered(value)\n//     }\n//\n//     let [opacity, setOpacity] = useState<boolean>(false)\n//\n//     function MenuFoo(opacityValue: boolean) {\n//         setOpacity(opacityValue)\n//     }\n//\n//     //for TODOLIST------------------------------------------------------\n//\n//     let [todolists, setTodolists] = useState<Array<todolistsType>>([\n//         {\n//             id: Todolist1,\n//             title: 'What to learn',\n//             filter: 'All'\n//         },\n//         {\n//             id: Todolist2,\n//             title: 'What to buy',\n//             filter: 'All'\n//         },\n//     ])\n//\n//     let [Tasks, setTasks] = useState(\n//         {\n//             [Todolist1]: [\n//                 {id: v1(), title: 'HTML&CSS', isDone: true},\n//                 {id: v1(), title: 'JS', isDone: false},\n//                 {id: v1(), title: 'React', isDone: false}\n//             ],\n//             [Todolist2]: [\n//                 {id: v1(), title: 'HTML&CSS', isDone: true},\n//                 {id: v1(), title: 'JS', isDone: false},\n//                 {id: v1(), title: 'React', isDone: false}\n//             ]\n//         });\n//\n//     const RemoveTodolist = (todolistsID: string) => {\n//         setTodolists(todolists.filter(f => f.id !== todolistsID))\n//     }\n//\n//     const addTask = (title:string, todolistsID: string) => {\n//         let todolist = Tasks[todolistsID];\n//         if (title.trim()!=='') {\n//             let newTasks = {id: v1(), title: title, isDone: true}\n//             Tasks[todolistsID] = [newTasks, ...todolist]\n//             setTasks({...Tasks})\n//         }\n//     }\n//\n//     let removeTask = (removeId: string,todolistsID: string) => {\n//         let todolist = Tasks[todolistsID];\n//         Tasks[todolistsID] = todolist.filter(f => f.id !== removeId)\n//         setTasks({...Tasks})\n//     }\n//\n//     const changeFilterTodolist = (filterValue: string, todolistsId: string) => {\n//         let todolist = todolists.find(f => f.id == todolistsId);\n//         if (todolist) {\n//             todolist.filter = filterValue;\n//             setTodolists([...todolists])\n//         }\n//     }\n//\n//     const changeStatus = (CheckBoxId: string, todolistsID: string) => {\n//         let todolist = Tasks[todolistsID];\n//         let changeStatusValue = Tasks[todolistsID].find(f => f.id === CheckBoxId);\n//         if (changeStatusValue) {\n//             changeStatusValue.isDone = !changeStatusValue.isDone\n//             setTasks({...Tasks})\n//         }\n//     }\n//\n//\n//     let [filter, setFilter] = useState('All');\n//     let tasksLayer=Tasks;\n//     if(filter==='Active'){\n//         tasksLayer=Tasks.filter(f=>f.isDone===false)\n//     }\n//     if(filter==='Completed'){\n//         tasksLayer=Tasks.filter(f=>f.isDone===true)\n//     }\n//\n//     return (\n//         <div>\n//             <div className=\"App\">\n//                 <BrowserRouter>\n//                     <Menu callBack={() => MenuFoo(!opacity)} opacity={opacity}/>\n//                     <Route path={'/monday'} render={() => <Telegram\n//                         name='Sasha'\n//                         surName='Yudintsev'\n//                         arQualities={filteredarQualities}\n//                         Delete={Delete}\n//                         changeFilter={changeFilter}\n//                     />}/>\n//\n//                     <Route path={'/tuesday'} render={() =>\n//                     {\n//                         tod\n//                     }\n//                         <TodoList\n//                         title=\"What to learn\"\n//                         Tasks={tasksLayer}\n//                         filter={filter}\n//                         addTask={addTask}\n//                         removeTask={removeTask}\n//                         changeFilterTodolist={changeFilterTodolist}\n//                         changeStatus={changeStatus}\n//                         />\n//                     }>\n//                     </Route>\n//                 </BrowserRouter>\n//             </div>\n//         </div>\n//     );\n// }\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n            <App/>,\n     </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"universal\":\"Input_universal__1ebzZ\",\"error\":\"Input_error__1Jpk0\",\"normal\":\"Input_normal__15tvf\",\"error-message\":\"Input_error-message__1kVfD\"};"],"sourceRoot":""}